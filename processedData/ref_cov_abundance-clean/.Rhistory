names(S.dist)[1] = "saturation.dist"
## get V distances
row.names(res.V.temp) = res.V.temp[,1]
V.dist = get.dist.df(res.V.temp[,-1])
names(V.dist)[1] = "value.dist"
hours.HSV = join_all(list(dist.hour.chunks.df, H.dist, S.dist, V.dist))
print(class(hours.HSV))
hours.HSV.list = c(hours.HSV.list, hours.HSV)
}
class(hours.HSV.list)
class(hours.HSV.list[[1]])
head(hours.HSV.list[[1]])
head(hours.HSV.list[1])
for (i in c(1:length(days))){
res.H.temp = subset(res.H, day == days[i])
res.H.temp$day = NULL
res.S.temp = subset(res.S, day == days[i])
res.S.temp$day = NULL
res.V.temp = subset(res.V, day == days[i])
res.V.temp$day = NULL
## get H distances
row.names(res.H.temp) = res.H.temp[,1]
H.dist = get.dist.df(res.H.temp[,-1])
names(H.dist)[1] = "hue.dist"
## get S distances
row.names(res.S.temp) = res.S.temp[,1]
S.dist = get.dist.df(res.S.temp[,-1])
names(S.dist)[1] = "saturation.dist"
## get V distances
row.names(res.V.temp) = res.V.temp[,1]
V.dist = get.dist.df(res.V.temp[,-1])
names(V.dist)[1] = "value.dist"
hours.HSV = join_all(list(dist.hour.chunks.df, H.dist, S.dist, V.dist))
hours.HSV.list[[i]] = hours.HSV
}
head(hours.HSV.list[[1]])
for (i in c(1:length(days))){
res.H.temp = subset(res.H, day == days[i])
res.H.temp$day = NULL
res.S.temp = subset(res.S, day == days[i])
res.S.temp$day = NULL
res.V.temp = subset(res.V, day == days[i])
res.V.temp$day = NULL
## get H distances
row.names(res.H.temp) = res.H.temp[,1]
H.dist = get.dist.df(res.H.temp[,-1])
names(H.dist)[1] = "hue.dist"
## get S distances
row.names(res.S.temp) = res.S.temp[,1]
S.dist = get.dist.df(res.S.temp[,-1])
names(S.dist)[1] = "saturation.dist"
## get V distances
row.names(res.V.temp) = res.V.temp[,1]
V.dist = get.dist.df(res.V.temp[,-1])
names(V.dist)[1] = "value.dist"
hours.HSV = join_all(list(dist.hour.chunks.df, H.dist, S.dist, V.dist))
hours.HSV$date = days[1]
hours.HSV.list[[i]] = hours.HSV
}
head(hours.HSV.list[[1]])
hours.HSV.res = do.call(rbind, hours.HSV.list)
head(hours.HSV.res)
unique(hours.HSV.res$date)
for (i in c(1:length(days))){
res.H.temp = subset(res.H, day == days[i])
res.H.temp$day = NULL
res.S.temp = subset(res.S, day == days[i])
res.S.temp$day = NULL
res.V.temp = subset(res.V, day == days[i])
res.V.temp$day = NULL
## get H distances
row.names(res.H.temp) = res.H.temp[,1]
H.dist = get.dist.df(res.H.temp[,-1])
names(H.dist)[1] = "hue.dist"
## get S distances
row.names(res.S.temp) = res.S.temp[,1]
S.dist = get.dist.df(res.S.temp[,-1])
names(S.dist)[1] = "saturation.dist"
## get V distances
row.names(res.V.temp) = res.V.temp[,1]
V.dist = get.dist.df(res.V.temp[,-1])
names(V.dist)[1] = "value.dist"
hours.HSV = join_all(list(dist.hour.chunks.df, H.dist, S.dist, V.dist))
hours.HSV$date = days[i]
hours.HSV.list[[i]] = hours.HSV
}
hours.HSV.res = do.call(rbind, hours.HSV.list)
unique(hours.HSV.res$date)
head(hours.HSV.list[[1]])
head(hours.HSV.list[[1]]$date)
unique(head(hours.HSV.list[[1]]$date))
unique(head(hours.HSV.list[[2]]$date))
unique(head(hours.HSV.list[[3]]$date))
unique(head(hours.HSV.list[[4]]$date))
rm(hours.HSV.res)
hours.HSV.res = do.call(rbind, hours.HSV.list)
head(hours.HSV.res)
unique(hours.HSV.res$date)
ggplot(hours.HSV, aes(x = value.dist, y = hours.dist, label = pairs)) + geom_text() + facet_wrap( ~ date, nrow = 2) + geom_text()
ggplot(hours.HSV.res, aes(x = value.dist, y = hours.dist, label = pairs)) + geom_text() + facet_wrap( ~ date, nrow = 2) + geom_text()
had(hours.HSV.list[[1]])
head(hours.HSV.list[[1]])
head(hours.HSV.list[[2]])
head(hours.HSV.list[[3]])
head(hours.HSV.list[[4]])
head(hours.HSV.list[[1]])
head(hours.HSV.list[[2]])
head(hours.HSV.list[[3]])
head(hours.HSV.list[[4]])
do.call(rbind, hours.HSV.list)
head(hours.HSV.res)
unique(hours.HSV.res$date)
hours.HSV.list = list()
days = unique(res.H$day)
library(plyr)
for (i in c(1:length(days))){
res.H.temp = subset(res.H, day == days[i])
res.H.temp$day = NULL
res.S.temp = subset(res.S, day == days[i])
res.S.temp$day = NULL
res.V.temp = subset(res.V, day == days[i])
res.V.temp$day = NULL
## get H distances
row.names(res.H.temp) = res.H.temp[,1]
H.dist = get.dist.df(res.H.temp[,-1])
names(H.dist)[1] = "hue.dist"
## get S distances
row.names(res.S.temp) = res.S.temp[,1]
S.dist = get.dist.df(res.S.temp[,-1])
names(S.dist)[1] = "saturation.dist"
## get V distances
row.names(res.V.temp) = res.V.temp[,1]
V.dist = get.dist.df(res.V.temp[,-1])
names(V.dist)[1] = "value.dist"
hours.HSV = join_all(list(dist.hour.chunks.df, H.dist, S.dist, V.dist))
hours.HSV$date = days[i]
hours.HSV.list[[i]] = hours.HSV
}
hours.HSV.res = do.call(rbind, hours.HSV.list)
unique(hours.HSV.res$date)
ggplot(hours.HSV.res, aes(x = value.dist, y = hours.dist, label = pairs)) + geom_text() + facet_wrap( ~ date, nrow = 2) + geom_text()
ggplot(hours.HSV.res, aes(x = value.dist, y = hours.dist, label = pairs)) + geom_text() + facet_wrap( ~ date, nrow = 2) + geom_text() + stat_smooth(method = lm)
ggplot(hours.HSV.res, aes(x = hue.dist, y = hours.dist, label = pairs)) + geom_text() + facet_wrap( ~ date, nrow = 2) + geom_text() + stat_smooth(method = lm)
dt = fread("~/Documents/wifire/processedData/features/output_SD_all_days.csv", header = FALSE)
new.col.names = c("filepath", paste0("H", c(1:180)), paste0("S", c(1:256)), paste0("V", c(1:256)))
setnames(dt, names(dt), new.col.names)
dt$day = sapply(dt$filepath, FUN = function(x) strsplit(x, split = "/")[[1]][7])
names(dt)
strsplit(dt$filepath[1], split = "/")
dt$filepath[1]
dt = fread("~/Documents/wifire/processedData/features/output_HUE_ZONES_3__ALL_DAYS_SD.csv", header = FALSE)
new.col.names = c("filepath", paste0("H", c(1:180)), paste0("S", c(1:256)), paste0("V", c(1:256)))
ncol(dt)
180*9
dt = fread("~/Documents/wifire/processedData/features/output_HUE_ZONES_3__ALL_DAYS_SD.csv", header = FALSE)
new.col.names = c("filepath", paste0("H", c(1:ncol(dt)-1))
dt = fread("~/Documents/wifire/processedData/features/output_HUE_ZONES_3__ALL_DAYS_SD.csv", header = FALSE)
new.col.names = c("filepath", paste0("H", c(1:ncol(dt)-1)))
setnames(dt, names(dt), new.col.names)
ncol(dt)
tail(new.col.names)
length(new.col.names)
head(new.col.names)
new.col.names = c("filepath", paste0("H", c(1:ncol(dt)-1)))
head(new.col.names)
head(paste0("H", c(1:ncol(dt)-1)))
new.col.names = c("filepath", paste0("H", c(1:1620))
new.col.names = c("filepath", paste0("H", c(1:1620)))
tail(new.col.names)
head(new.col.names)
setnames(dt, names(dt), new.col.names)
dt$day = sapply(dt$filepath, FUN = function(x) strsplit(x, split = "/")[[1]][7])
dt$hour.chunk = sapply(dt$filepath, FUN = function(x) strsplit(x, split = "/")[[1]][8])
names(dt)
res = as.data.frame(dt[,lapply(.SD, FUN = function(x) as.double(mean(x))), by = list(day, hour.chunk), .SDcols = 2:1621])
rm(dt)
head(res)
rm(dt)
library(ggplot2)
library(reshape)
names(res)
res.H.m = melt(res, id.vars = c("day", "hour.chunk"))
head(res.H.m)
ggplot(res.H.m, aes(x = variable, y = value, colour = day)) + geom_point() + facet_wrap(~ hour.chunk, nrow = 3)
return_mds_per_day = function(df){
days = unique(df$day)
days.mds = data.frame(day = NA, hour.chunk = NA, coord.1 = NA, coord.2 = NA)
for (i in c(1:length(days))){
df.temp = subset(df, day == days[i])
df.temp$day = NULL
row.names(df.temp) = df.temp$hour.chunk
dist.matrix = dist(df.temp[, -which(names(df.temp) == "hour.chunk")], method = "euclidean")
fit <- cmdscale(dist.matrix,eig=TRUE, k=2) # k is the number of dim
mds.1 = fit$points[,1]
mds.2 = fit$points[,2]
if (max(mds.1) < max(abs(mds.1))) { mds.1 = -1*mds.1}
#if (max(mds.2) < max(abs(mds.2))) { mds.2 = -1*mds.2}
days.mds = rbind(days.mds, data.frame(day = days[i], hour.chunk = row.names(fit$points), coord.1 = mds.1, coord.2 = mds.2))
}
return(days.mds[-1,])
}
mds.H = return_mds_per_day(res)
ggplot(mds.H, aes(x = coord.1, y = coord.2, label = hour.chunk)) + facet_wrap( ~ day, nrow = 2) + geom_text() + ggtitle("MDS of Hue Distributions")
first.row = c(c(0:3), c(3:0))
dist.hour.chunks = toeplitz(first.row)
hour.chunks = unique(res.S$hour.chunk)
rownames(dist.hour.chunks) = hour.chunks[order(hour.chunks)]
colnames(dist.hour.chunks) = hour.chunks[order(hour.chunks)]
first.row = c(c(0:3), c(3:0))
dist.hour.chunks = toeplitz(first.row)
hour.chunks = unique(res.S$hour.chunk)
hour.chunks = unique(res$hour.chunk)
rownames(dist.hour.chunks) = hour.chunks[order(hour.chunks)]
colnames(dist.hour.chunks) = hour.chunks[order(hour.chunks)]
get.dist.df = function(x){
if (is.matrix(x)){
# if it is a matrix already, then assume that it is a proper distance matrix
z = x
}
else{
z = as.matrix(dist(x))
}
z[lower.tri(z,diag=TRUE)]=NA  #Prepare to drop duplicates and meaningless information
z=as.data.frame(as.table(z))  #Turn into a 3-column table
z=na.omit(z)  #Get rid of the junk we flagged above
z=z[order(-abs(z$Freq)),]
z$Var1 = as.character(z$Var1)
z$Var2 = as.character(z$Var2)
ordered.pair = c()
for (i in c(1:nrow(z))){
if (z$Var1[i] > z$Var2[i]){
ordered.pair = c(ordered.pair,
paste(z$Var1[i], "-",z$Var2[i]))
}
else{
ordered.pair = c(ordered.pair,
paste(z$Var2[i], "-",z$Var1[i]))
}
}
z$pairs = ordered.pair
z$Var1 = NULL
z$Var2 = NULL
return(z)
}
dist.hour.chunks.df = get.dist.df(dist.hour.chunks)
names(dist.hour.chunks.df)[1] = "hours.dist"
hours.HSV.list = list()
days = unique(res.H$day)
days = unique(res$day)
hours.H.list = list()
hours.H.list = list()
dist.hour.chunks.df = get.dist.df(dist.hour.chunks)
names(dist.hour.chunks.df)[1] = "hours.dist"
hours.H.list = list()
days = unique(res$day)
library(plyr)
for (i in c(1:length(days))){
res.H.temp = subset(res, day == days[i])
## get H distances
row.names(res.H.temp) = res.H.temp[,1]
H.dist = get.dist.df(res.H.temp[,-1])
names(H.dist)[1] = "hue.dist"
hours.H = join_all(list(dist.hour.chunks.df, H.dist))
hours.H$date = days[i]
hours.H.list[[i]] = hours.H
}
source('~/Documents/wifire/scripts/wifire_hourly_analysis.R')
ggplot(hours.HSV.res, aes(x = hue.dist, y = hours.dist, label = pairs)) + geom_text() + facet_wrap( ~ date, nrow = 2) + geom_text() + stat_smooth(method = lm)
load("~/Dropbox/Broadway_processed_data/data/instagram_park_ave_stream_michelle.Rda")
head(query)
plot(query$lat[c(1:100)], query$lon[c(1:100)])
plot(query$lat[c(1:1000)], query$lon[c(1:1000)])
plot(query$lat[c(1:10000)], query$lon[c(1:10000)])
plot(query$lon[c(1:10000)], query$lat[c(1:10000)])
plot(query$lon[c(1:100000)], query$lat[c(1:100000)])
write.csv(query[c(1:10000), c("lat", "lon")], file = "insta_sample.csv", quote = FALE, row.names = FALSE)
write.csv(query[c(1:10000), c("lat", "lon")], file = "insta_sample.csv", quote = FALSE, row.names = FALSE)
getwd()
bleh = read.csv("~/Documents/twitter_data_grant/16_city_correlations.csv", header = TRUE, stringsAsFactors = FALSE)
bleh
library(xtable)
install.packages("xtable")
library(xtable)
library(xtable)
xtable(bleh)
bleh = read.csv("~/Documents/misc_scripts/feature_normalization/scripts/base_python/normalizedsample.csv", header = FALSE, stringsAsFactors = FALSE)
head(bleh)
?apply
mean(apply(bleh[,-1], 1, max))
mean(apply(bleh[,-1], 1, sum))
apply(bleh[,-1], 1, max)
df = read.csv("~/Dropbox/UCSD WORK/+OptimalMovementControl/ConfluenceCompositeGridSearchResults/all_trials_r_and_peak_vel.csv", header = FALSE, stringsAsFactors = FALSE)
df = read.csv("~/Dropbox/UCSD WORK/+OptimalMovementControl/ConfluenceCompositeGridSearchResults/all_trials_r_and_peak_vel.csv", header = TRUE, stringsAsFactors = FALSE)
df = read.csv("~/Dropbox/UCSD WORK/+OptimalMovementControl/ConfluenceCompositeGridSearchResults/all_trials_r_and_peak_vel.csv", header = TRUE)
df = read.csv("~/Dropbox/UCSD WORK/+OptimalMovementControl/ConfluenceCompositeGridSearchResults/all_trials_r_and_peak_vel.csv", header = TRUE)
head(df)
by(df, df$subject.id, mean)
library(plyr)
names(df)
adply(df, .(subject.id), FUN = function(df) mean(r.value))
?ddply
ldply(df, .(subject.id), FUN = function(df) mean(r.value))
dlply(df, .(subject.id), FUN = function(df) mean(r.value))
ddply(df, .(subject.id), FUN = function(df) data.frame(avg.r = mean(df$r.value), sd.r = sd(df$r.value))
)
ddply(df, .(subject.id), FUN = function(x) return(data.frame(avg.r = mean(x$r.value), sd.r = sd(x$r.value)))
)
ddply(df, .(subject.id), FUN = function(x) return(data.frame(avg.r = mean(x$r.value), sd.r = sd(x$r.value))))
df$subject.id = as.factor(df$subject.id)
ddply(df, .(subject.id), FUN = function(x) return(data.frame(avg.r = mean(x$r.value), sd.r = sd(x$r.value))))
df$subject.id = as.character(df$subject.id)
?ddply
ddply(df, .(subject.id), FUN = function(x) return(data.frame(avg.r = mean(x$r.value), sd.r = sd(x$r.value))))
head(df)
366*5
head(df)
ddply(df, .(subject.id), mean(r.value))
names(df)
ddply(baseball, .(year), summarise,
mean_rbi = mean(rbi, na.rm = TRUE))
rbi = ddply(baseball, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE))
head(baseball)
head(rbi)
ddply(df, .(subject.id), summarise, mean_r = mean(r.value))
ddply(df, .(subject.id), mean_r = mean(r.value))
ddply(df, .(subject.id), summarise, mean_r = mean(r.value))
bleh = read.csv("~/Documents/batch_feature_extraction/scripts/hawgs.csv", header = FALSE, stringsAsFactors = FALSE)
head(bleh)
names(bleh)
ncol(bleh)
nrow(bleh)
150*150
source('~/Dropbox/UCSD WORK/+OptimalMovementControl/ConfluenceCompositeGridSearchResults/Rscripts/CI_pairwise_difference.R')
source('~/Dropbox/UCSD WORK/+OptimalMovementControl/ConfluenceCompositeGridSearchResults/Rscripts/theta_distributions.R')
source('~/Dropbox/UCSD WORK/+OptimalMovementControl/ConfluenceCompositeGridSearchResults/Rscripts/theta_distributions.R')
source('~/Dropbox/UCSD WORK/+OptimalMovementControl/ConfluenceCompositeGridSearchResults/Rscripts/theta_distributions.R')
source('~/Documents/microbiome/scripts/benford/benford_biome.R')
install.packages("BenfordTests")
source('~/Documents/microbiome/scripts/benford/benford_biome.R')
install.packages("entropy")
source('~/Documents/microbiome/scripts/benford/benford_biome.R')
print(p)
p = ggplot(KL.subjects, aes(x = KL.benford, y = reorder(subject, KL.benford), colour = subject.type)) + geom_point(size = 2)
print(p)
p = ggplot(KL.subjects, aes(x = KL.benford, y = reorder(subject, KL.benford), colour = subject.type)) + geom_point(size = 2)
p + theme(axis.text.y  = element_text(size=4))
head(first.digit)
length(first.digit)
table(first.digit)
table(first.digit) -> first.digit.table
first.digit.table/sum(first.digit.table)
head(microbiome.data)
source('~/Documents/microbiome/scripts/benford/benford_plots.R')
head(microbiome.data)
head(res)
pbenf()
head(KL.subjects)
p = ggplot(KL.subjects, aes(x = KL.benford, y = reorder(subject, KL.benford), colour = subject.type)) + geom_point(size = 2)
print(p)
?dist
source('~/Documents/microbiome/scripts/benford/benford_plots.R')
print(p)
source('~/Documents/microbiome/scripts/benford/benford_plots.R')
print(p)
res[1:7]
plot(res[1:7])
min(res)
?min
which.min(res)
which.max(res)
head(KL.subjects)
aggregate(KL.subjects, by = list(subject.type), FUN = mean)
aggregate(KL.subjects, by = list(KL.subjects$subject.type), FUN = mean)
aggregate(KL.subjects, by = list(KL.subjects$subject.type), FUN = mean, na.rm = TRUE)
aggregate(KL.subjects, by = list(KL.subjects$subject.type), FUN = mean, na.rm = TRUE) -> res.agg
res.agg
plot(res.agg$KL.benford)
source('~/Documents/microbiome/scripts/benford/benford_plots.R')
aggregate(KL.subjects, by = list(KL.subjects$subject.type), FUN = mean, na.rm = TRUE) -> res.agg
plot(res.agg$KL.benford)
names(microbiome.data)
res.agg
?min
which.min(res)
res[89]
which.max(res)
res[24]
hist(res)
hist(res, 20)
hist(res, 30)
first.digit = sapply(microbiome.data$UC20020002CD, signifd)
hist(first.digit, breaks = c(0:9), freq = FALSE)
source('~/Documents/microbiome/scripts/benford/benford_plots.R')
which.max(res)
which.min(res)
hist(res, 100)
res-24
res[24]
which(res > .1)
first.digit = sapply(microbiome.data$LS002, signifd)
hist(first.digit, breaks = c(0:9), freq = FALSE)
first.digit = sapply(microbiome.data$UC20020002CD, signifd)
hist(first.digit, breaks = c(0:9), freq = FALSE)
first.digit = sapply(microbiome.data$UC20020002CD.1, signifd)
hist(first.digit, breaks = c(0:9), freq = FALSE)
first.digit = sapply(microbiome.data$HE.SRS104400, signifd)
hist(first.digit, breaks = c(0:9), freq = FALSE)
hist(first.digit, breaks = c(0:9), freq = FALSE)
first.digit = sapply(microbiome.data$HE.SRS104400, signifd)
hist(first.digit, breaks = c(0:9), freq = FALSE)
ncol(microbiome.data)
nrow(KL.subjects)
table(KL.subjects$subject.type)
require(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
row.names(microbiome.data)
which(row.names(microbiome.data) %in% "coli")
which(row.names(microbiome.data) %in% "Coli")
which("Coli" %in% row.names(microbiome.data))
which("coli" %in% row.names(microbiome.data))
which("Escherichia coli" %in% row.names(microbiome.data))
"Escherichia coli" %in% row.names(microbiome.data)
"Escherichia coli"  == row.names(microbiome.data)
which("Escherichia coli"  == row.names(microbiome.data))
head(microbiome.data[3,])
which.min(res)
which.max(res)
names(which.max(res))
closest.benford = sapply(microbiome.data[,names(which.min(res))], signifd)
hist(closest.benford, breaks = c(0:9), freq = FALSE)
farthest.benford = sapply(microbiome.data[,names(which.max(res))], signifd)
hist(farthest.benford, breaks = c(0:9), freq = FALSE)
closest.benford.dist = digit.dist(microbiome.data[,names(which.min(res))])
closest.benford.dist
farthest.benford.dist = digit.dist(microbiome.data[,names(which.max(res))])
lead.digit.dists = rbind(data.frame(case = names(which.min(res)), dist = closest.benford.dist),
data.frame(case = "Benford's distribution", dist = pbenf()))
names(which.min(res))
pbenf()
data.frame(case = names(which.min(res)), dist = closest.benford.dist)
data.frame(case = "Benford's distribution", dist = pbenf())
closest.benford.dist
class(closest.benford.dist)
names(closest.benford.dist)
as.matrix(closest.benford.dist)
data.frame(case = names(which.min(res)), digit = names(closest.benford.dist), dist = as.matrix(closest.benford.dist))
pbenf()
names(pbenf())
matrix(pbenf())
lead.digit.dists = rbind(data.frame(case = names(which.min(res)), digit = names(closest.benford.dist), dist = as.matrix(closest.benford.dist)),
data.frame(case = "Benford's distribution", digit = names(pbenf()), dist = matrix(pbenf())))
lead.digit.dists
ggplot(lead.digit.dists, aes(x = digit, y = dist, colour = case)) + geom_point(size = 4)
closest.dist = rbind(data.frame(case = names(which.min(res)), digit = names(closest.benford.dist), dist = as.matrix(closest.benford.dist)),
data.frame(case = "Benford's distribution", digit = names(pbenf()), dist = matrix(pbenf())))
ggplot(closest.dist, aes(x = digit, y = dist, colour = case)) + geom_point(size = 4)
ggplot(closest.dist, aes(x = digit, y = dist, colour = case)) + geom_point(size = 4) -> p.close
out <- py$ggplotly(p.close, kwargs=list(filename="gut-microbiome-leadig-digit-distribution", fileopt="overwrite"))
py <- plotly()
out <- py$ggplotly(p.close, kwargs=list(filename="gut-microbiome-leadig-digit-distribution", fileopt="overwrite"))
farthest.dist = rbind(data.frame(case = names(which.min(res)), digit = names(farthest.benford.dist), dist = as.matrix(farthest.benford.dist)),
data.frame(case = "Benford's distribution", digit = names(pbenf()), dist = matrix(pbenf())))
ggplot(farthest.dist, aes(x = digit, y = dist, colour = case)) + geom_point(size = 4) -> p.far
print(p.far)
farthest.dist = rbind(data.frame(case = names(which.max(res)), digit = names(farthest.benford.dist), dist = as.matrix(farthest.benford.dist)),
data.frame(case = "Benford's distribution", digit = names(pbenf()), dist = matrix(pbenf())))
ggplot(farthest.dist, aes(x = digit, y = dist, colour = case)) + geom_point(size = 4) -> p.far
print(p.far)
farthest.dist
out <- py$ggplotly(p.far, kwargs=list(filename="gut-microbiome-leadig-digit-uc-patient", fileopt="overwrite"))
?signifd
ks.benftest(microbiome.data[,names(which.min(res))])
ks.benftest(microbiome.data[,names(which.max(res))])
chisq.benftest(microbiome.data[,names(which.max(res))])
chisq.benftest(microbiome.data[,names(which.min(res))])
?signifd
usq.benftest(microbiome.data[,names(which.min(res))])
mdist.benftest(microbiome.data[,names(which.min(res))])
edist.benftest(microbiome.data[,names(which.min(res))])
meandigit.benftest(microbiome.data[,names(which.min(res))])
jpsq.benftest(microbiome.data[,names(which.min(res))])
jpsq.benftest(microbiome.data[,names(which.max(res))])
mdist.benftest(microbiome.data[,names(which.max(res))])
bleh = sapply(microbiome.data, jpsq.benftest)
plot(bleh)
head(bleh)
class(bleh)
dim(bleh)
plot(bleh[2,])
bleh[2,]
plot(unlist(bleh[2,])
)
bleh -> p.values
names(p.values[2,])
p.df = data.frame(subject = names(p.values[2,]), p.values = unlist(p.values[2,]))
p.pval = ggplot(p.df, aes(x = subject, y = p.values)) + geom_point()
print(p.val)
print(p.pval)
out <- py$ggplotly(p.pval, kwargs=list(filename="gut-microbiome-leadig-digit-pvals", fileopt="overwrite"))
p.df[order(p.df$p.values, decreasing = TRUE),]
head(p.df[order(p.df$p.values, decreasing = TRUE),])
first.digit = sapply(microbiome.data$LS005, signifd)
hist(first.digit, breaks = c(0:9), freq = FALSE)
first.digit = sapply(microbiome.data$HE.SRS012273, signifd)
hist(first.digit, breaks = c(0:9), freq = FALSE)
first.digit = sapply(microbiome.data$HE.SRS011134, signifd)
hist(first.digit, breaks = c(0:9), freq = FALSE)
bleh = read.csv("~/Dropbox/Broadway_processed_data/processedData/cluster_centers_100.csv", header = FALSE, stringsAsFactors = FALSE)
head(bleh)
table(bleh$V2)
max(table(bleh$V2))
